name: Deploy to Production

# mainブランチへのPushでワークフローを実行します
on:
  push:
    branches: [ main ]
  # 手動で実行することも可能にします
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完全な履歴をチェックアウトして、正確なデプロイを可能にする

      # ステップ2: SSH接続の設定（Secretsに保存したSSH秘密鍵を使用）
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # ステップ3: サーバーのホストキーを既知のホストに追加
      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          # ホストキーの確認を無効化してキースキャンを実行
          ssh-keyscan -t ed25519,ecdsa,rsa -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
        # これにより、SSH接続時の中間者攻撃を防ぎます

      # ステップ4: ファイルをサーバーにデプロイ
      - name: Deploy to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # rsyncでリポジトリのファイルをサーバーへ転送
          # 以下のディレクトリ/ファイルは転送対象外とする：
          # - .git、.github: GitのメタデータおよびCI設定
          # - .env: 環境変数（機密情報）
          # - vendor、node_modules: 依存関係（サーバー側で再インストール）
          rsync -avz --delete \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='.env' \
            --exclude='vendor/' \
            --exclude='node_modules/' \
            -e "ssh -p $SERVER_PORT -o StrictHostKeyChecking=no" \
            ./ $SERVER_USER@$SERVER_HOST:$DEPLOY_PATH

          # サーバー上のPHPパスを確認
          echo "サーバー上のPHPパスを確認しています..."
          ssh -p $SERVER_PORT -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "which php || echo 'PHPコマンドが見つかりません'"
          
          # サーバー側で追加処理を実行：必要に応じてcomposerのインストールとパーミッション設定
          ssh -p $SERVER_PORT -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "cd $DEPLOY_PATH && \
            # PHPを絶対パスで指定するか、あるいはPATHが通っている場所にあればそのまま使用
            if command -v /usr/bin/php >/dev/null 2>&1; then \
              PHP_CMD='/usr/bin/php'; \
            elif command -v /usr/local/bin/php >/dev/null 2>&1; then \
              PHP_CMD='/usr/local/bin/php'; \
            elif command -v php >/dev/null 2>&1; then \
              PHP_CMD='php'; \
            else \
              echo '警告: PHPが見つかりません。スクリプトの実行をスキップします。'; \
              PHP_CMD='echo PHPコマンドが利用できません:'; \
            fi && \
            \
            echo 'PHPバージョン:' && \
            \$PHP_CMD -v || echo 'PHPバージョンの確認に失敗しました' && \
            \
            if [ -f 'composer.json' ] && command -v composer >/dev/null 2>&1; then \
              echo 'Composerパッケージをインストールしています...' && \
              composer install --no-dev --optimize-autoloader; \
            else \
              echo 'Composerが見つかりません、またはcomposer.jsonがありません。Composerのインストールをスキップします。'; \
            fi && \
            \
            echo 'ファイルのパーミッションを設定しています...' && \
            find . -type d -exec chmod 755 {} \; && \
            find . -type f -exec chmod 644 {} \; && \
            \
            echo 'デプロイ完了！'"

      # ステップ5: デプロイ結果の通知（成功・失敗に関わらず実行）
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ デプロイが成功しました！サイトは正常に更新されています。"
          else
            echo "❌ デプロイに失敗しました。ログを確認してください。"
          fi