name: Deploy to Production

# mainブランチへのPushでワークフローを実行します
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # ステップ1: リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ステップ2: SCPアクションでファイルをアップロード
      - name: Deploy to Lolipop via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./"
          target: ${{ secrets.DEPLOY_PATH }}
          overwrite: true
          strip_components: 1
          rm: true
          exclude: |
            .git
            .github
            .env
            vendor
            node_modules

      # ステップ3: サーバー上で追加コマンドを実行
      - name: Run commands on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          port: ${{ secrets.SERVER_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            # もし composer.json があれば、依存関係をインストール
            if [ -f composer.json ]; then
              composer install --no-dev --optimize-autoloader
            fi
            # パーミッション設定
            find . -type d -exec chmod 755 {} \;
            find . -type f -exec chmod 644 {} \;

      # ステップ4: デプロイ結果の通知
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ デプロイが成功しました！サイトは正常に更新されています。"
          else
            echo "❌ デプロイに失敗しました。ログを確認してください。"
          fi