name: Deploy to Production

# mainブランチへのプッシュをトリガーにワークフローを実行
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # ステップ1: リポジトリのコードをチェックアウト（最新バージョンに更新）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完全な履歴をチェックアウト

      # ステップ2: Composerの依存関係をインストール
      - name: Install Composer Dependencies
        run: composer install --no-dev --optimize-autoloader

      # ステップ3: SSH設定を直接実行（単純化）
      - name: Setup SSH connection
        run: |
          # 秘密鍵ファイルを作成
          mkdir -p $HOME/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa
          
          # ホスト情報を追加
          ssh-keyscan -p 2222 -t ed25519,ecdsa,rsa ssh.lolipop.jp >> $HOME/.ssh/known_hosts
          chmod 600 $HOME/.ssh/known_hosts
          
          # SSH設定ファイルを作成
          cat > $HOME/.ssh/config << EOF
          Host lolipop
            HostName ssh.lolipop.jp
            User deci.jp-trendcompany
            Port 2222
            IdentityFile $HOME/.ssh/id_rsa
            StrictHostKeyChecking accept-new
          EOF
          
          chmod 600 $HOME/.ssh/config

      # ステップ4: 環境変数の設定
      - name: Set deployment variables
        id: vars
        run: |
          echo "DEPLOY_PATH=~/web/sopranohaction" >> $GITHUB_OUTPUT
          echo "SITE_URL=http://trendcompany.deci.jp/sopranohaction/" >> $GITHUB_OUTPUT

      # ステップ5: ファイルをサーバーにデプロイ
      - name: Deploy to server
        env:
          DEPLOY_PATH: ${{ steps.vars.outputs.DEPLOY_PATH }}
        run: |
          # rsyncを使用してファイルを安全に転送
          rsync -avz --delete --exclude='.git/' --exclude='.github/' --exclude='.env' \
            --exclude='node_modules/' --exclude='uploads/' --exclude='.htaccess' \
            --exclude='admin/.htaccess' \
            -e "ssh -F $HOME/.ssh/config" \
            ./ lolipop:$DEPLOY_PATH
          
          # パーミッション設定
          ssh -F $HOME/.ssh/config lolipop "cd $DEPLOY_PATH && \
            find . -type d -exec chmod 755 {} \; && \
            find . -type f -exec chmod 644 {} \;"
            
          # アップロードディレクトリの確認と設定
          ssh -F $HOME/.ssh/config lolipop "cd $DEPLOY_PATH && \
            mkdir -p uploads/photos && \
            chmod -R 755 uploads && \
            find uploads -type f -exec chmod 644 {} \;"
            
          # 重要なファイルのバックアップと復元（.htaccessなど）
          ssh -F $HOME/.ssh/config lolipop "cd $DEPLOY_PATH && \
            if [ ! -f .htaccess.bak ] && [ -f .htaccess ]; then \
              cp .htaccess .htaccess.bak; \
            fi && \
            if [ -f .htaccess.bak ] && [ ! -f .htaccess ]; then \
              cp .htaccess.bak .htaccess; \
            fi"
            
          # ルートディレクトリ用.htaccessの処理（テンプレートから生成）
          ssh -F $HOME/.ssh/config lolipop "cd $DEPLOY_PATH && \
            if [ -f .htaccess.template ]; then \
              # envsubstがない場合に備えてsedでも置換
              if command -v envsubst >/dev/null 2>&1; then \
                export SITE_ENVIRONMENT=\"production\"; \
                envsubst < .htaccess.template > .htaccess; \
              else \
                # 環境変数の置換（SITE_ENVIRONMENT=productionに設定）
                sed 's/%{ENV:SITE_ENVIRONMENT} =production//g' .htaccess.template > .htaccess; \
              fi; \
              chmod 644 .htaccess; \
            fi"
            
          # 管理画面用.htaccessの処理（テンプレートから生成）
          ssh -F $HOME/.ssh/config lolipop "cd $DEPLOY_PATH && \
            # .htpasswdファイルがなければ作成（パスワード: wedding2025）
            if [ ! -f .htpasswd ]; then \
              echo 'admin:$apr1$jExA0LYA$9JgNNhvlCjGKwYPGHY1HX1' > .htpasswd; \
              chmod 644 .htpasswd; \
            fi && \
            # 環境変数を設定して管理者.htaccessを生成
            if [ -f admin/.htaccess.template ]; then \
              # envsubstがない場合に備えてsedでも置換
              if command -v envsubst >/dev/null 2>&1; then \
                export ADMIN_ACCESS_CONTROL=\"restricted\"; \
                envsubst < admin/.htaccess.template > admin/.htaccess; \
              else \
                # 単純に条件を有効にする（固定で制限モード）
                sed '/RewriteCond %{ENV:ADMIN_ACCESS_CONTROL} =restricted/d' admin/.htaccess.template > admin/.htaccess; \
              fi; \
              chmod 644 admin/.htaccess; \
            fi"

      # ステップ6: デプロイ結果の通知
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ デプロイが成功しました！サイトは正常に更新されています。"
            echo "デプロイ先URL: ${{ steps.vars.outputs.SITE_URL }}"
          else
            echo "❌ デプロイに失敗しました。ログを確認して問題を解決してください。"
          fi