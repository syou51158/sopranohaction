name: Deploy to Production

# mainブランチへのプッシュをトリガーにワークフローを実行
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # ステップ1: リポジトリのコードをチェックアウト（最新バージョンに更新）
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 完全な履歴をチェックアウト

      # ステップ2: Composerの依存関係をインストール
      - name: Install Composer Dependencies
        run: composer install --no-dev --optimize-autoloader

      # ステップ3: SSH設定を最小限の構成で実装（完全簡素化）
      - name: Setup SSH connection
        run: |
          # デバッグ情報を表示
          echo "セットアップ開始"
          
          # 秘密鍵ファイルを作成
          mkdir -p $HOME/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > $HOME/.ssh/id_rsa
          chmod 600 $HOME/.ssh/id_rsa
          
          # SSH接続テスト（冗長モード）
          echo "ホスト情報を確認..."
          ssh -o StrictHostKeyChecking=no -p 2222 deci.jp-trendcompany@ssh.lolipop.jp "whoami && pwd"

      # ステップ4: 環境変数の設定
      - name: Set deployment variables
        id: vars
        run: |
          echo "DEPLOY_PATH=web/sopranohaction" >> $GITHUB_OUTPUT
          echo "SITE_URL=http://trendcompany.deci.jp/sopranohaction/" >> $GITHUB_OUTPUT

      # ステップ5: ファイルをサーバーにデプロイ（基本最小構成）
      - name: Deploy to server
        env:
          DEPLOY_PATH: ${{ steps.vars.outputs.DEPLOY_PATH }}
        run: |
          # ディレクトリ構造を確認
          ssh -o StrictHostKeyChecking=no -p 2222 deci.jp-trendcompany@ssh.lolipop.jp "ls -la ~/ && mkdir -p ~/$DEPLOY_PATH"
          
          # 最小限のオプションでrsyncを使用
          rsync -avz -e "ssh -p 2222 -o StrictHostKeyChecking=no" \
            --delete --exclude='.git/' --exclude='.github/' --exclude='.env' \
            --exclude='node_modules/' --exclude='uploads/' --exclude='.htaccess' \
            --exclude='admin/.htaccess' \
            ./ deci.jp-trendcompany@ssh.lolipop.jp:~/$DEPLOY_PATH/
          
          # パーミッション設定
          ssh -o StrictHostKeyChecking=no -p 2222 deci.jp-trendcompany@ssh.lolipop.jp "cd ~/$DEPLOY_PATH && \
            find . -type d -exec chmod 755 {} \; && \
            find . -type f -exec chmod 644 {} \;
            
            # アップロードディレクトリの確認と設定
            mkdir -p uploads/photos && \
            chmod -R 755 uploads
            
            # .htaccessファイルの処理
            if [ -f .htaccess.template ]; then \
              export SITE_ENVIRONMENT=\"production\"; \
              cat .htaccess.template > .htaccess; \
              chmod 644 .htaccess; \
            fi
            
            # 管理画面.htaccessの処理
            if [ -f admin/.htaccess.template ]; then \
              export ADMIN_ACCESS_CONTROL=\"open\"; \
              cat admin/.htaccess.template > admin/.htaccess; \
              chmod 644 admin/.htaccess; \
            fi"

      # ステップ6: デプロイ結果の通知
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ デプロイが成功しました！サイトは正常に更新されています。"
            echo "デプロイ先URL: ${{ steps.vars.outputs.SITE_URL }}"
          else
            echo "❌ デプロイに失敗しました。ログを確認して問題を解決してください。"
          fi